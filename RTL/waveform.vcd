$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 +! clk $end
  $var wire 1 ,! rst $end
  $var wire 32 -! instr_mem_data [31:0] $end
  $var wire 32 .! instr_mem_addr [31:0] $end
  $var wire 32 /! data_mem_rdata [31:0] $end
  $var wire 32 0! data_mem_addr [31:0] $end
  $var wire 32 1! data_mem_wdata [31:0] $end
  $var wire 1 2! data_mem_write $end
  $scope module Pipeline $end
   $var wire 1 +! clk $end
   $var wire 1 ,! rst $end
   $var wire 32 -! instr_mem_data [31:0] $end
   $var wire 32 .! instr_mem_addr [31:0] $end
   $var wire 32 /! data_mem_rdata [31:0] $end
   $var wire 32 0! data_mem_addr [31:0] $end
   $var wire 32 1! data_mem_wdata [31:0] $end
   $var wire 1 2! data_mem_write $end
   $var wire 32 # pc [31:0] $end
   $var wire 32 $ pc_plus4 [31:0] $end
   $var wire 1 % pc_write $end
   $var wire 32 -! instr_if [31:0] $end
   $var wire 1 & if_id_write $end
   $var wire 1 ' if_id_flush $end
   $var wire 32 ( pc_id [31:0] $end
   $var wire 32 ) instr_id [31:0] $end
   $var wire 5 * rs1_id [4:0] $end
   $var wire 5 + rs2_id [4:0] $end
   $var wire 5 , rd_id [4:0] $end
   $var wire 3 - funct3_id [2:0] $end
   $var wire 32 . imm_id [31:0] $end
   $var wire 1 / reg_write_id $end
   $var wire 1 0 mem_read_id $end
   $var wire 1 1 mem_write_id $end
   $var wire 1 2 mem_to_reg_id $end
   $var wire 1 3 branch_id $end
   $var wire 4 4 alu_ctrl_id [3:0] $end
   $var wire 32 3! rs1_data_id [31:0] $end
   $var wire 32 4! rs2_data_id [31:0] $end
   $var wire 32 5 wb_data [31:0] $end
   $var wire 5 6 rd_wb [4:0] $end
   $var wire 1 7 reg_write_wb $end
   $var wire 1 8 id_ex_flush $end
   $var wire 32 9 pc_ex [31:0] $end
   $var wire 32 : rs1_ex [31:0] $end
   $var wire 32 ; rs2_ex [31:0] $end
   $var wire 32 < imm_ex [31:0] $end
   $var wire 5 = rs1_addr_ex [4:0] $end
   $var wire 5 > rs2_addr_ex [4:0] $end
   $var wire 5 ? rd_ex [4:0] $end
   $var wire 4 @ alu_ctrl_ex [3:0] $end
   $var wire 3 A funct3_ex [2:0] $end
   $var wire 1 B reg_write_ex $end
   $var wire 1 C mem_read_ex $end
   $var wire 1 D mem_write_ex $end
   $var wire 1 E mem_to_reg_ex $end
   $var wire 1 F branch_ex $end
   $var wire 2 G forward_a [1:0] $end
   $var wire 2 H forward_b [1:0] $end
   $var wire 32 I op1_ex [31:0] $end
   $var wire 32 J op2_ex [31:0] $end
   $var wire 32 K alu_result_ex [31:0] $end
   $var wire 1 ' branch_taken_ex $end
   $var wire 32 L branch_target_ex [31:0] $end
   $var wire 32 M alu_result_mem [31:0] $end
   $var wire 32 N rs2_data_mem [31:0] $end
   $var wire 5 O rd_mem [4:0] $end
   $var wire 1 P reg_write_mem $end
   $var wire 1 Q mem_read_mem $end
   $var wire 1 R mem_write_mem $end
   $var wire 1 S mem_to_reg_mem $end
   $var wire 1 6! branch_mem $end
   $var wire 3 T funct3_mem [2:0] $end
   $var wire 32 5! load_data [31:0] $end
   $var wire 32 U mem_data_wb [31:0] $end
   $var wire 32 V alu_result_wb [31:0] $end
   $var wire 1 W mem_to_reg_wb $end
   $scope module u_alu $end
    $var wire 1 +! clock $end
    $var wire 1 ,! reset $end
    $var wire 32 I io_a [31:0] $end
    $var wire 32 X io_b [31:0] $end
    $var wire 32 K io_result [31:0] $end
    $var wire 6 Y io_opcode [5:0] $end
    $var wire 32 I io_a_0 [31:0] $end
    $var wire 32 X io_b_0 [31:0] $end
    $var wire 6 Y io_opcode_0 [5:0] $end
    $var wire 95 Z result [94:0] $end
    $var wire 32 K io_result_0 [31:0] $end
   $upscope $end
   $scope module u_br $end
    $var wire 32 I rs1 [31:0] $end
    $var wire 32 J rs2 [31:0] $end
    $var wire 3 A funct3 [2:0] $end
    $var wire 1 ' branch_taken $end
    $var wire 1 ] equal $end
    $var wire 1 ^ not_equal $end
    $var wire 1 _ slt_signed $end
    $var wire 1 ` sge_signed $end
    $var wire 1 a slt_unsigned $end
    $var wire 1 b sge_unsigned $end
    $var wire 1 ' taken $end
   $upscope $end
   $scope module u_ctrl $end
    $var wire 7 c opcode [6:0] $end
    $var wire 1 / reg_write $end
    $var wire 1 0 mem_read $end
    $var wire 1 1 mem_write $end
    $var wire 1 2 mem_to_reg $end
    $var wire 1 3 branch $end
    $var wire 4 4 alu_ctrl [3:0] $end
   $upscope $end
   $scope module u_ex_mem $end
    $var wire 1 +! clk $end
    $var wire 1 ,! rst $end
    $var wire 32 K alu_result_in [31:0] $end
    $var wire 32 J rs2_data_in [31:0] $end
    $var wire 5 ? rd_in [4:0] $end
    $var wire 1 B reg_write_in $end
    $var wire 1 C mem_read_in $end
    $var wire 1 D mem_write_in $end
    $var wire 1 E mem_to_reg_in $end
    $var wire 1 F branch_in $end
    $var wire 1 ' branch_taken_in $end
    $var wire 32 L branch_target_in [31:0] $end
    $var wire 3 A funct3_in [2:0] $end
    $var wire 32 M alu_result_out [31:0] $end
    $var wire 32 N rs2_data_out [31:0] $end
    $var wire 5 O rd_out [4:0] $end
    $var wire 1 P reg_write_out $end
    $var wire 1 Q mem_read_out $end
    $var wire 1 R mem_write_out $end
    $var wire 1 S mem_to_reg_out $end
    $var wire 1 d branch_out $end
    $var wire 1 e branch_taken_out $end
    $var wire 32 f branch_target_out [31:0] $end
    $var wire 3 T funct3_out [2:0] $end
   $upscope $end
   $scope module u_fwd $end
    $var wire 5 O ex_mem_rd [4:0] $end
    $var wire 1 P ex_mem_reg_write $end
    $var wire 5 6 mem_wb_rd [4:0] $end
    $var wire 1 7 mem_wb_reg_write $end
    $var wire 5 = id_ex_rs1 [4:0] $end
    $var wire 5 > id_ex_rs2 [4:0] $end
    $var wire 2 G forward_a [1:0] $end
    $var wire 2 H forward_b [1:0] $end
   $upscope $end
   $scope module u_hz $end
    $var wire 1 C id_ex_mem_read $end
    $var wire 5 ? id_ex_rd [4:0] $end
    $var wire 5 * if_id_rs1 [4:0] $end
    $var wire 5 + if_id_rs2 [4:0] $end
    $var wire 1 % pc_write $end
    $var wire 1 & if_id_write $end
    $var wire 1 8 id_ex_flush $end
   $upscope $end
   $scope module u_id_ex $end
    $var wire 1 +! clk $end
    $var wire 1 ,! rst $end
    $var wire 1 8 id_ex_flush $end
    $var wire 32 ( pc_in [31:0] $end
    $var wire 32 3! rs1_data_in [31:0] $end
    $var wire 32 4! rs2_data_in [31:0] $end
    $var wire 32 . imm_in [31:0] $end
    $var wire 5 * rs1_addr_in [4:0] $end
    $var wire 5 + rs2_addr_in [4:0] $end
    $var wire 5 , rd_in [4:0] $end
    $var wire 4 4 alu_ctrl_in [3:0] $end
    $var wire 3 - funct3_in [2:0] $end
    $var wire 1 / reg_write_in $end
    $var wire 1 0 mem_read_in $end
    $var wire 1 1 mem_write_in $end
    $var wire 1 2 mem_to_reg_in $end
    $var wire 1 3 branch_in $end
    $var wire 32 9 pc_out [31:0] $end
    $var wire 32 : rs1_data_out [31:0] $end
    $var wire 32 ; rs2_data_out [31:0] $end
    $var wire 32 < imm_out [31:0] $end
    $var wire 5 = rs1_addr_out [4:0] $end
    $var wire 5 > rs2_addr_out [4:0] $end
    $var wire 5 ? rd_out [4:0] $end
    $var wire 4 @ alu_ctrl_out [3:0] $end
    $var wire 3 A funct3_out [2:0] $end
    $var wire 1 B reg_write_out $end
    $var wire 1 C mem_read_out $end
    $var wire 1 D mem_write_out $end
    $var wire 1 E mem_to_reg_out $end
    $var wire 1 F branch_out $end
   $upscope $end
   $scope module u_if_id $end
    $var wire 1 +! clk $end
    $var wire 1 ,! rst $end
    $var wire 1 & if_id_write $end
    $var wire 1 ' flush $end
    $var wire 32 $ pc_in [31:0] $end
    $var wire 32 -! instr_in [31:0] $end
    $var wire 32 ( pc_out [31:0] $end
    $var wire 32 ) instr_out [31:0] $end
   $upscope $end
   $scope module u_imm $end
    $var wire 32 ) instr [31:0] $end
    $var wire 32 . imm_out [31:0] $end
    $var wire 7 c op [6:0] $end
   $upscope $end
   $scope module u_load $end
    $var wire 1 +! clock $end
    $var wire 1 ,! reset $end
    $var wire 32 M io_addr [31:0] $end
    $var wire 32 /! io_dataIn [31:0] $end
    $var wire 3 T io_funct3 [2:0] $end
    $var wire 32 5! io_dataOut [31:0] $end
    $var wire 32 5! extractedData [31:0] $end
    $var wire 32 0! io_addr_0 [31:0] $end
    $var wire 32 /! io_dataIn_0 [31:0] $end
    $var wire 3 T io_funct3_0 [2:0] $end
    $var wire 2 g loadWidth [1:0] $end
    $var wire 1 h isSigned $end
    $var wire 32 5! io_dataOut_0 [31:0] $end
   $upscope $end
   $scope module u_mem_wb $end
    $var wire 1 +! clk $end
    $var wire 1 ,! rst $end
    $var wire 32 5! mem_data_in [31:0] $end
    $var wire 32 M alu_result_in [31:0] $end
    $var wire 5 O rd_in [4:0] $end
    $var wire 1 P reg_write_in $end
    $var wire 1 S mem_to_reg_in $end
    $var wire 32 U mem_data_out [31:0] $end
    $var wire 32 V alu_result_out [31:0] $end
    $var wire 5 6 rd_out [4:0] $end
    $var wire 1 7 reg_write_out $end
    $var wire 1 W mem_to_reg_out $end
   $upscope $end
   $scope module u_rf $end
    $var wire 1 +! clk $end
    $var wire 1 7 reg_write $end
    $var wire 5 * rs1_addr [4:0] $end
    $var wire 5 + rs2_addr [4:0] $end
    $var wire 5 6 rd_addr [4:0] $end
    $var wire 32 5 rd_data [31:0] $end
    $var wire 32 3! rs1_data [31:0] $end
    $var wire 32 4! rs2_data [31:0] $end
    $var wire 32 i regs[0] [31:0] $end
    $var wire 32 j regs[1] [31:0] $end
    $var wire 32 k regs[2] [31:0] $end
    $var wire 32 l regs[3] [31:0] $end
    $var wire 32 m regs[4] [31:0] $end
    $var wire 32 n regs[5] [31:0] $end
    $var wire 32 o regs[6] [31:0] $end
    $var wire 32 p regs[7] [31:0] $end
    $var wire 32 q regs[8] [31:0] $end
    $var wire 32 r regs[9] [31:0] $end
    $var wire 32 s regs[10] [31:0] $end
    $var wire 32 t regs[11] [31:0] $end
    $var wire 32 u regs[12] [31:0] $end
    $var wire 32 v regs[13] [31:0] $end
    $var wire 32 w regs[14] [31:0] $end
    $var wire 32 x regs[15] [31:0] $end
    $var wire 32 y regs[16] [31:0] $end
    $var wire 32 z regs[17] [31:0] $end
    $var wire 32 { regs[18] [31:0] $end
    $var wire 32 | regs[19] [31:0] $end
    $var wire 32 } regs[20] [31:0] $end
    $var wire 32 ~ regs[21] [31:0] $end
    $var wire 32 !! regs[22] [31:0] $end
    $var wire 32 "! regs[23] [31:0] $end
    $var wire 32 #! regs[24] [31:0] $end
    $var wire 32 $! regs[25] [31:0] $end
    $var wire 32 %! regs[26] [31:0] $end
    $var wire 32 &! regs[27] [31:0] $end
    $var wire 32 '! regs[28] [31:0] $end
    $var wire 32 (! regs[29] [31:0] $end
    $var wire 32 )! regs[30] [31:0] $end
    $var wire 32 *! regs[31] [31:0] $end
   $upscope $end
   $scope module u_store $end
    $var wire 1 +! clock $end
    $var wire 1 ,! reset $end
    $var wire 32 M address [31:0] $end
    $var wire 32 N data_in [31:0] $end
    $var wire 1 R wen $end
    $var wire 32 1! mem_out [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#1
b00000000000000000000000000000100 #
b00000000000000000000000000001000 $
1%
1&
1'
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000 *
b00000 +
b00000 ,
b000 -
b00000000000000000000000000000000 .
0/
00
01
02
03
b0000 4
b00000000000000000000000000000000 5
b00000 6
07
08
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000 =
b00000 >
b00000 ?
b0000 @
b000 A
0B
0C
0D
0E
0F
b00 G
b00 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000 O
0P
0Q
0R
0S
b000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
0W
b00000000000000000000000000000000 X
b000000 Y
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Z
1]
0^
0_
1`
0a
1b
b0000000 c
0d
1e
b00000000000000000000000000000000 f
b00 g
1h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
b00000000000000000000000000000000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
b00000000000000000000000000000000 u
b00000000000000000000000000000000 v
b00000000000000000000000000000000 w
b00000000000000000000000000000000 x
b00000000000000000000000000000000 y
b00000000000000000000000000000000 z
b00000000000000000000000000000000 {
b00000000000000000000000000000000 |
b00000000000000000000000000000000 }
b00000000000000000000000000000000 ~
b00000000000000000000000000000000 !!
b00000000000000000000000000000000 "!
b00000000000000000000000000000000 #!
b00000000000000000000000000000000 $!
b00000000000000000000000000000000 %!
b00000000000000000000000000000000 &!
b00000000000000000000000000000000 '!
b00000000000000000000000000000000 (!
b00000000000000000000000000000000 )!
b00000000000000000000000000000000 *!
1+!
0,!
b00000000010100000000000010010011 -!
b00000000000000000000000000000100 .!
b00000000000000000000000000000000 /!
b00000000000000000000000000000000 0!
b00000000000000000000000000000000 1!
02!
b00000000000000000000000000000000 3!
b00000000000000000000000000000000 4!
b00000000000000000000000000000000 5!
06!
#2
0+!
#3
b00000000000000000000000000001000 #
b00000000000000000000000000001100 $
1+!
b00000000101000000000000100010011 -!
b00000000000000000000000000001000 .!
#4
0+!
#5
b00000000000000000000000000001100 #
b00000000000000000000000000010000 $
1+!
b00000000111100000000000110010011 -!
b00000000000000000000000000001100 .!
#6
0+!
#7
b00000000000000000000000000010000 #
b00000000000000000000000000010100 $
1+!
b00000001010000000000001000010011 -!
b00000000000000000000000000010000 .!
#8
0+!
#9
b00000000000000000000000000010100 #
b00000000000000000000000000011000 $
1+!
b00000001100100000000001010010011 -!
b00000000000000000000000000010100 .!
#10
0+!
#11
b00000000000000000000000000011000 #
b00000000000000000000000000011100 $
1+!
b00000001111000000000001100010011 -!
b00000000000000000000000000011000 .!
#12
0+!
#13
b00000000000000000000000000011100 #
b00000000000000000000000000100000 $
1+!
b00000000000000000000000001101111 -!
b00000000000000000000000000011100 .!
#14
0+!
#15
b00000000000000000000000000100000 #
b00000000000000000000000000100100 $
1+!
b00000000000000000000000000000000 -!
b00000000000000000000000000100000 .!
#16
0+!
#17
b00000000000000000000000000100100 #
b00000000000000000000000000101000 $
1+!
b00000000000000000000000000100100 .!
#18
0+!
#19
b00000000000000000000000000101000 #
b00000000000000000000000000101100 $
1+!
b00000000000000000000000000101000 .!
#20
0+!
#21
b00000000000000000000000000101100 #
b00000000000000000000000000110000 $
1+!
b00000000000000000000000000101100 .!
#22
0+!
#23
b00000000000000000000000000110000 #
b00000000000000000000000000110100 $
1+!
b00000000000000000000000000110000 .!
#24
0+!
#25
b00000000000000000000000000110100 #
b00000000000000000000000000111000 $
1+!
b00000000000000000000000000110100 .!
#26
0+!
#27
b00000000000000000000000000111000 #
b00000000000000000000000000111100 $
1+!
b00000000000000000000000000111000 .!
#28
0+!
#29
b00000000000000000000000000111100 #
b00000000000000000000000001000000 $
1+!
b00000000000000000000000000111100 .!
#30
0+!
#31
b00000000000000000000000001000000 #
b00000000000000000000000001000100 $
1+!
b00000000000000000000000001000000 .!
#32
0+!
#33
b00000000000000000000000001000100 #
b00000000000000000000000001001000 $
1+!
b00000000000000000000000001000100 .!
#34
0+!
#35
b00000000000000000000000001001000 #
b00000000000000000000000001001100 $
1+!
b00000000000000000000000001001000 .!
#36
0+!
#37
b00000000000000000000000001001100 #
b00000000000000000000000001010000 $
1+!
b00000000000000000000000001001100 .!
#38
0+!
#39
b00000000000000000000000001010000 #
b00000000000000000000000001010100 $
1+!
b00000000000000000000000001010000 .!
#40
0+!
#41
b00000000000000000000000001010100 #
b00000000000000000000000001011000 $
1+!
b00000000000000000000000001010100 .!
#42
0+!
#43
b00000000000000000000000001011000 #
b00000000000000000000000001011100 $
1+!
b00000000000000000000000001011000 .!
#44
0+!
#45
b00000000000000000000000001011100 #
b00000000000000000000000001100000 $
1+!
b00000000000000000000000001011100 .!
#46
0+!
#47
b00000000000000000000000001100000 #
b00000000000000000000000001100100 $
1+!
b00000000000000000000000001100000 .!
#48
0+!
#49
b00000000000000000000000001100100 #
b00000000000000000000000001101000 $
1+!
b00000000000000000000000001100100 .!
#50
0+!
#51
b00000000000000000000000001101000 #
b00000000000000000000000001101100 $
1+!
b00000000000000000000000001101000 .!
#52
0+!
#53
b00000000000000000000000001101100 #
b00000000000000000000000001110000 $
1+!
b00000000000000000000000001101100 .!
#54
0+!
#55
b00000000000000000000000001110000 #
b00000000000000000000000001110100 $
1+!
b00000000000000000000000001110000 .!
#56
0+!
#57
b00000000000000000000000001110100 #
b00000000000000000000000001111000 $
1+!
b00000000000000000000000001110100 .!
#58
0+!
#59
b00000000000000000000000001111000 #
b00000000000000000000000001111100 $
1+!
b00000000000000000000000001111000 .!
#60
0+!
#61
b00000000000000000000000001111100 #
b00000000000000000000000010000000 $
1+!
b00000000000000000000000001111100 .!
#62
0+!
#63
b00000000000000000000000010000000 #
b00000000000000000000000010000100 $
1+!
b00000000000000000000000010000000 .!
#64
0+!
#65
b00000000000000000000000010000100 #
b00000000000000000000000010001000 $
1+!
b00000000000000000000000010000100 .!
#66
0+!
#67
b00000000000000000000000010001000 #
b00000000000000000000000010001100 $
1+!
b00000000000000000000000010001000 .!
#68
0+!
#69
b00000000000000000000000010001100 #
b00000000000000000000000010010000 $
1+!
b00000000000000000000000010001100 .!
#70
0+!
#71
b00000000000000000000000010010000 #
b00000000000000000000000010010100 $
1+!
b00000000000000000000000010010000 .!
#72
0+!
#73
b00000000000000000000000010010100 #
b00000000000000000000000010011000 $
1+!
b00000000000000000000000010010100 .!
#74
0+!
#75
b00000000000000000000000010011000 #
b00000000000000000000000010011100 $
1+!
b00000000000000000000000010011000 .!
#76
0+!
#77
b00000000000000000000000010011100 #
b00000000000000000000000010100000 $
1+!
b00000000000000000000000010011100 .!
#78
0+!
#79
b00000000000000000000000010100000 #
b00000000000000000000000010100100 $
1+!
b00000000000000000000000010100000 .!
#80
0+!
#81
b00000000000000000000000010100100 #
b00000000000000000000000010101000 $
1+!
b00000000000000000000000010100100 .!
#82
0+!
#83
b00000000000000000000000010101000 #
b00000000000000000000000010101100 $
1+!
b00000000000000000000000010101000 .!
#84
0+!
#85
b00000000000000000000000010101100 #
b00000000000000000000000010110000 $
1+!
b00000000000000000000000010101100 .!
#86
0+!
#87
b00000000000000000000000010110000 #
b00000000000000000000000010110100 $
1+!
b00000000000000000000000010110000 .!
#88
0+!
#89
b00000000000000000000000010110100 #
b00000000000000000000000010111000 $
1+!
b00000000000000000000000010110100 .!
#90
0+!
#91
b00000000000000000000000010111000 #
b00000000000000000000000010111100 $
1+!
b00000000000000000000000010111000 .!
#92
0+!
#93
b00000000000000000000000010111100 #
b00000000000000000000000011000000 $
1+!
b00000000000000000000000010111100 .!
#94
0+!
#95
b00000000000000000000000011000000 #
b00000000000000000000000011000100 $
1+!
b00000000000000000000000011000000 .!
#96
0+!
#97
b00000000000000000000000011000100 #
b00000000000000000000000011001000 $
1+!
b00000000000000000000000011000100 .!
#98
0+!
#99
b00000000000000000000000011001000 #
b00000000000000000000000011001100 $
1+!
b00000000000000000000000011001000 .!
#100
0+!
